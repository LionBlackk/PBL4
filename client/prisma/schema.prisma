// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
//User, Account, Conversation, Message, File

model User{
  id String @id @map("_id") @db.ObjectId @default(auto())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessage Message[] @relation("seen",fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
  files File[]
  audioFiles AudioFile[]

}

model Conversation{
  id String @id @map("_id") @db.ObjectId @default(auto())
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messageIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])

}
model Account{
  id String @id @map("_id") @db.ObjectId @default(auto())
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  
}

model Message{
  id String @id @map("_id") @db.ObjectId @default(auto())
  body String?
  image String?
  file String?
  audio String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id])
}

model File{
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  name    String
  type    String
  size    Int
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AudioFile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  name String
  type String
  size Int
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}